# -*- coding: utf-8 -*-
"""hipaa_compliance_healthcare_project.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aRQoAP5XEYGI1NQRjFGQITgPUsS9P1PG
"""

# -*- coding: utf-8 -*-
"""HIPAA_Compliance_Healthcare_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGh5KJxQEPs7eHaEH5pVog1zVna0yc4Q

**Project Title: HIPAA-Compliant Healthcare Data Management (Simulated US Context)**
Goal: To demonstrate fundamental principles of HIPAA compliance, including Protected Health Information (PHI) privacy, security, consent, and basic audit trails, within a simulated US healthcare data environment using Python.

**Step 0: Understanding HIPAA Fundamentals**
HIPAA is the cornerstone of US healthcare data privacy and security. Key aspects include:

Protected Health Information (PHI): Individually identifiable health information. This includes demographic data, medical history, test results, insurance information, and other information used to identify a patient, that is created or received by a healthcare provider, health plan, employer, or healthcare clearinghouse. The HIPAA Privacy Rule identifies 18 "identifiers" that, if present, make health information PHI.

Covered Entities (CEs): Health plans, healthcare clearinghouses, and healthcare providers who transmit health information electronically in connection with a transaction for which HHS has adopted a standard.

Business Associates (BAs): Persons or entities who perform functions or activities on behalf of, or provides services to, a covered entity that involve the use or disclosure of PHI.

Privacy Rule: Sets national standards for the protection of individually identifiable health information by CEs and BAs.

Minimum Necessary Rule: Use or disclose only the minimum necessary PHI to accomplish the purpose of the use or disclosure.

Patient Rights: Patients have rights to access their PHI, request amendments, receive an accounting of disclosures, and request restrictions on certain uses and disclosures.

Security Rule: Sets national standards for the security of electronic Protected Health Information (ePHI). It requires administrative, physical, and technical safeguards.

Administrative Safeguards: Policies and procedures to manage administrative actions, such as security management process, workforce security, information access management.

Physical Safeguards: Physical measures, policies and procedures to protect electronic information systems and related buildings and equipment from natural and environmental hazards and unauthorized intrusion.

Technical Safeguards: Technology and policy and procedures for its use to protect ePHI and control access to it. (e.g., access control, audit controls, integrity controls, transmission security).

Breach Notification Rule: Requires CEs and BAs to notify affected individuals, HHS, and in some cases, the media, following a breach of unsecured PHI.

De-identification: The process of removing or obscuring PHI from a dataset so that the remaining information cannot be used to identify an individual. HIPAA provides two methods: Safe Harbor and Statistical De-identification. We'll focus on Safe Harbor for this demo.

**Step 2: Data Simulation (HIPAA-Compliant Approach)**
"""

# Install faker if you don't have it
import subprocess
import sys

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

install('faker')
install('numpy')
install('pandas')
install('matplotlib')
install('seaborn')
install('cryptography')

import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime, timedelta

# Define the 18 HIPAA Identifiers (for reference and conceptual removal)
HIPAA_IDENTIFIERS = [
    "Name", "Address", "All elements of dates (except year) for dates directly related to an individual, including birth date, admission date, discharge date, date of death; and all ages over 89 and all elements of dates (including year) indicative of such age",
    "Telephone numbers", "Fax numbers", "Email addresses", "Social Security numbers",
    "Medical record numbers", "Health plan beneficiary numbers", "Account numbers",
    "Certificate/license numbers", "Vehicle identifiers and serial numbers, including license plate numbers",
    "Device identifiers and serial numbers", "Web URLs", "IP addresses",
    "Biometric identifiers, including finger and voice prints",
    "Full face photographic images and any comparable images",
    "Any other unique identifying number, characteristic, or code (unless assigned a random number without derivative of PHI and not re-identifiable)"
]

"""Define Data Structure and Simulation Function:"""

def generate_simulated_healthcare_data_us(num_records=100):
    fake = Faker('en_US') # US locale

    data = []
    for i in range(num_records):
        patient_id = f"MRN{100000 + i:05d}" # Medical Record Number (PHI)
        ssn = fake.ssn() # Social Security Number (PHI)
        name = fake.name() # Name (PHI)
        dob = fake.date_of_birth(minimum_age=1, maximum_age=95) # Date of Birth (PHI, especially if age > 89)
        gender = random.choice(['Male', 'Female', 'Other'])
        address = fake.address().replace('\n', ', ') # Address (PHI)
        phone = fake.phone_number() # Phone Number (PHI)
        email = fake.email() # Email Address (PHI)
        health_plan_id = f"HPID{random.randint(10000, 99999)}" # Health Plan Beneficiary Number (PHI)

        # Dates related to individual (PHI if not just year)
        admission_date = fake.date_between(start_date='-5y', end_date='today')
        # For ages over 89, date of birth is PHI. We'll simulate this for some records.
        if (datetime.now().year - dob.year) > 89:
            dob_phi = dob # Keep as full date
        else:
            dob_phi = dob # Still PHI, but specifically relevant for age > 89 rule

        discharge_date = admission_date + timedelta(days=random.randint(1, 15)) if random.random() > 0.3 else None

        # Medical data (simulated - sensitive, but PHI if linked to identifiers)
        blood_group = random.choice(['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'])
        diagnosis = random.choice([
            'Hypertension', 'Type 2 Diabetes', 'Coronary Artery Disease', 'Asthma',
            'Chronic Kidney Disease', 'Depression', 'Obesity', 'Osteoarthritis',
            'Influenza', 'COVID-19'
        ])
        medication = random.choice([
            'Lisinopril', 'Metformin', 'Aspirin', 'Albuterol',
            'Losartan', 'Sertraline', 'Orlistat', 'Celecoxib', 'Tamiflu', 'Paxlovid'
        ])
        lab_results = {
            'Glucose': random.uniform(70, 150),
            'Cholesterol': random.uniform(150, 250),
            'BP_Systolic': random.randint(100, 180),
            'BP_Diastolic': random.randint(60, 120)
        }

        # Simulate consent status for research, etc.
        consent_for_treatment = True # Assumed for active patients
        consent_for_research_sharing = random.choice([True, False])
        consent_for_marketing = random.choice([True, False])

        data.append({
            'PatientID_MRN': patient_id, # This is a direct identifier
            'SSN': ssn, # Direct identifier
            'Name': name, # Direct identifier
            'DateOfBirth': dob_phi, # Direct identifier
            'Gender': gender,
            'Address': address, # Direct identifier
            'Phone': phone, # Direct identifier
            'Email': email, # Direct identifier
            'HealthPlanID': health_plan_id, # Direct identifier
            'BloodGroup': blood_group,
            'Diagnosis': diagnosis,
            'Medication': medication,
            'LabResults': lab_results,
            'AdmissionDate': admission_date, # Direct identifier
            'DischargeDate': discharge_date, # Direct identifier
            'ConsentForTreatment': consent_for_treatment,
            'ConsentForResearchSharing': consent_for_research_sharing,
            'ConsentForMarketing': consent_for_marketing
        })
    return pd.DataFrame(data)

# Generate data
df = generate_simulated_healthcare_data_us(num_records=200)
print("Simulated US Healthcare Data (First 5 Rows):")
print(df.head())
print(f"\nTotal Records: {len(df)}")

"""**Step 3: Implementing HIPAA Safeguards - De-identification (Safe Harbor Method)**

Define De-identification Function (Safe Harbor):
"""

import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime, timedelta
import hashlib # For potential future hashing, though not directly used in the current de-id logic

# Re-run data generation
df = generate_simulated_healthcare_data_us(num_records=200)

def de_identify_safe_harbor(dataframe):
    df_de_identified = dataframe.copy()

    identifiers_to_remove = [
        'PatientID_MRN', 'SSN', 'Name', 'Address', 'Phone', 'Email',
        'HealthPlanID'
    ]

    for col in identifiers_to_remove:
        if col in df_de_identified.columns:
            df_de_identified = df_de_identified.drop(columns=[col])

    # Handle dates and ages (as per HIPAA Safe Harbor)
    # 1. Convert to datetime objects first for robust handling
    date_cols = ['DateOfBirth', 'AdmissionDate', 'DischargeDate']
    for col in date_cols:
        if col in df_de_identified.columns:
            # Use errors='coerce' to turn unparseable dates into NaT (Not a Time)
            df_de_identified[col] = pd.to_datetime(df_de_identified[col], errors='coerce')


    if 'DateOfBirth' in df_de_identified.columns:
        def process_dob_for_deid(dob):
            if pd.isna(dob):
                return None
            # Check if dob is a Timestamp object (expected after pd.to_datetime)
            if isinstance(dob, pd.Timestamp):
                age = datetime.now().year - dob.year
                if age > 89:
                    return '90+' # Aggregate ages over 89
                return dob.year # Keep only year of birth
            return None # Handle cases where it might not be a datetime even after coercion

        df_de_identified['YearOfBirth_Deidentified'] = df_de_identified['DateOfBirth'].apply(process_dob_for_deid)
        df_de_identified = df_de_identified.drop(columns=['DateOfBirth'])

    if 'AdmissionDate' in df_de_identified.columns:
        # Only extract year if it's a valid datetime
        df_de_identified['AdmissionYear_Deidentified'] = df_de_identified['AdmissionDate'].dt.year
        df_de_identified = df_de_identified.drop(columns=['AdmissionDate'])

    if 'DischargeDate' in df_de_identified.columns:
        # Only extract year if it's a valid datetime
        df_de_identified['DischargeYear_Deidentified'] = df_de_identified['DischargeDate'].dt.year
        df_de_identified = df_de_identified.drop(columns=['DischargeDate'])

    return df_de_identified

# Apply de-identification
df_de_identified = de_identify_safe_harbor(df)
print("\nDe-identified Data (First 5 Rows - No HIPAA Identifiers):")
print(df_de_identified.head())
print(f"\nOriginal Columns: {df.columns.tolist()}")
print(f"De-identified Columns: {df_de_identified.columns.tolist()}")

"""**Step 4: Implementing HIPAA Safeguards - Consent Management**
Filter by Consent for Research Sharing:

"""

# For research sharing, typically de-identified data is preferred, and often explicit consent is still sought.
df_research_data_consented = df_de_identified[df_de_identified['ConsentForResearchSharing'] == True]
print(f"\nDe-identified Records with Consent for Research Sharing: {len(df_research_data_consented)}")
print(df_research_data_consented[['YearOfBirth_Deidentified', 'Diagnosis', 'ConsentForResearchSharing']].head())

"""Filter by Consent for Marketing:"""

df_marketing_consented_phi = df[df['ConsentForMarketing'] == True]
print(f"\nOriginal PHI Records with Consent for Marketing: {len(df_marketing_consented_phi)}")
# Displaying some PHI as it's for marketing *with* consent
print(df_marketing_consented_phi[['PatientID_MRN', 'Name', 'Email', 'ConsentForMarketing']].head())

# Example of what *not* to do without proper consent (and minimum necessary rule violation)
print("\nAttempting to access PHI for marketing *without* 'ConsentForMarketing':")
df_no_marketing_consent = df[df['ConsentForMarketing'] == False]
print(f"Number of records *without* marketing consent: {len(df_no_marketing_consent)}")
# In a real system, access to this PHI for marketing would be strictly blocked and logged as a violation.

"""**Step 5: HIPAA Technical Safeguards - Audit Controls & Access Logging**

Audit Log Implementation:
"""

audit_log_hipaa = []

def log_ephi_access(user_id, action, patient_mrn=None, data_accessed=None, status="Success", purpose=""):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {
        'Timestamp': timestamp,
        'UserID': user_id,
        'Action': action,
        'PatientMRN': patient_mrn,
        'DataAccessed': data_accessed,
        'Status': status,
        'Purpose': purpose # Crucial for HIPAA - why was data accessed?
    }
    audit_log_hipaa.append(log_entry)
    print(f"AUDIT LOG: {timestamp} - User '{user_id}' '{action}' (Patient: {patient_mrn}, Data: {data_accessed}) - {status} - Purpose: {purpose}")

# Simulate some ePHI accesses
# 1. Doctor viewing patient's diagnosis for treatment (Permitted Use for TPO)
patient1_mrn = df.iloc[0]['PatientID_MRN']
patient1_diagnosis = df.iloc[0]['Diagnosis']
log_ephi_access(user_id='Dr. Green (Physician)', action='View ePHI', patient_mrn=patient1_mrn, data_accessed='Diagnosis', purpose='Treatment')

# 2. Billing clerk accessing patient's health plan ID for payment (Permitted Use for TPO, Minimum Necessary)
patient2_mrn = df.iloc[1]['PatientID_MRN']
patient2_health_plan_id = df.iloc[1]['HealthPlanID']
log_ephi_access(user_id='Sarah (Billing Clerk)', action='Access ePHI', patient_mrn=patient2_mrn, data_accessed='HealthPlanID', purpose='Payment Operations')

# 3. Researcher attempting to access identifiable data without proper authorization (simulated failure)
patient3_mrn = df.iloc[2]['PatientID_MRN']
log_ephi_access(user_id='Research_Analyst_X', action='Access PHI (Full Record)', patient_mrn=patient3_mrn, status="Denied - No Research Authorization", purpose='Unauthorized Research')

# 4. Data transfer for de-identified research data (assuming consent and proper BA agreement)
log_ephi_access(user_id='Data_Transfer_Service', action='Export De-identified Data', patient_mrn='N/A (De-identified)', data_accessed='De-identified Dataset', purpose='Approved Research Collaboration')


print("\n--- Full Simulated HIPAA Audit Log ---")
audit_df_hipaa = pd.DataFrame(audit_log_hipaa)
print(audit_df_hipaa)

"""**Step 6: HIPAA Technical Safeguards - Access Control (Conceptual)**

Role-Based Access Control (Conceptual):
"""

# In a real system, this would be tied to an authentication/authorization system (e.g., Active Directory, OAuth)
user_permissions = {
    'Dr. Green (Physician)': ['access_patient_chart', 'update_diagnosis', 'prescribe_medication'],
    'Nurse Emily (Nurse)': ['access_patient_chart', 'update_vitals'],
    'Sarah (Billing Clerk)': ['access_billing_info', 'process_claims'],
    'Research_Analyst_X': ['access_de_identified_data'], # Only de-identified
    'System_Admin': ['manage_users', 'view_audit_logs', 'system_maintenance']
}

def can_access(user, data_type, patient_mrn=None, purpose=""):
    if user not in user_permissions:
        log_ephi_access(user, f"Attempt access to {data_type}", patient_mrn, status="Denied - Unknown User", purpose=purpose)
        return False

    if data_type == 'patient_chart':
        if 'access_patient_chart' in user_permissions[user]:
            log_ephi_access(user, f"Access {data_type}", patient_mrn, status="Success", purpose=purpose)
            return True
        else:
            log_ephi_access(user, f"Access {data_type}", patient_mrn, status="Denied - Unauthorized", purpose=purpose)
            return False
    elif data_type == 'billing_info':
        if 'access_billing_info' in user_permissions[user]:
            log_ephi_access(user, f"Access {data_type}", patient_mrn, status="Success", purpose=purpose)
            return True
        else:
            log_ephi_access(user, f"Access {data_type}", patient_mrn, status="Denied - Unauthorized", purpose=purpose)
            return False
    elif data_type == 'de_identified_data':
        if 'access_de_identified_data' in user_permissions[user]:
            log_ephi_access(user, f"Access {data_type}", 'N/A (De-identified)', status="Success", purpose=purpose)
            return True
        else:
            log_ephi_access(user, f"Access {data_type}", 'N/A (De-identified)', status="Denied - Unauthorized", purpose=purpose)
            return False
    else:
        log_ephi_access(user, f"Attempt access to unknown data type: {data_type}", patient_mrn, status="Denied - Invalid Data Type", purpose=purpose)
        return False

print("\n--- Conceptual Access Control Checks ---")
# Simulate various access attempts
current_patient_mrn = df.iloc[5]['PatientID_MRN']
if can_access('Dr. Green (Physician)', 'patient_chart', current_patient_mrn, 'Treatment'):
    print(f"Dr. Green accessed patient {current_patient_mrn} chart successfully.")
    # Actual access to data would occur here, observing Minimum Necessary
    print(f"Dr. Green views diagnosis: {df[df['PatientID_MRN'] == current_patient_mrn]['Diagnosis'].iloc[0]}")

if can_access('Research_Analyst_X', 'patient_chart', current_patient_mrn, 'Research'):
    print(f"Researcher X accessed patient {current_patient_mrn} chart (should be denied).")
else:
    print(f"Researcher X denied access to patient {current_patient_mrn} chart (Correct).")

if can_access('Sarah (Billing Clerk)', 'billing_info', current_patient_mrn, 'Claim Processing'):
    print(f"Sarah accessed billing info for patient {current_patient_mrn} successfully.")
    print(f"Sarah views Health Plan ID: {df[df['PatientID_MRN'] == current_patient_mrn]['HealthPlanID'].iloc[0]}")

"""Encryption (Conceptual/Example of Library):
HIPAA mandates encryption for ePHI at rest and in transit. This is a conceptual example, not a full implementation.
"""

from cryptography.fernet import Fernet

# Generate a key (in a real scenario, this key would be securely managed)
key = Fernet.generate_key()
cipher_suite = Fernet(key)

def encrypt_data(data):
    # Data must be bytes
    return cipher_suite.encrypt(data.encode())

def decrypt_data(encrypted_data):
    return cipher_suite.decrypt(encrypted_data).decode()

sensitive_data_example = "Patient SSN: 123-45-6789, Diagnosis: Cancer"
encrypted_example = encrypt_data(sensitive_data_example)

print("\n--- Encryption (Conceptual) ---")
print(f"Original sensitive data: {sensitive_data_example}")
print(f"Encrypted data (at rest/in transit): {encrypted_example}")
# Decrypt only when authorized and for legitimate purpose
decrypted_example = decrypt_data(encrypted_example)
print(f"Decrypted data: {decrypted_example}")

print("\n**Important Note on Encryption:**")
print("This is a basic demonstration using `cryptography.fernet`. In a production HIPAA-compliant system, encryption involves:")
print("1. Key Management Systems (KMS) for secure storage and rotation of encryption keys.")
print("2. Database-level encryption (Transparent Data Encryption - TDE).")
print("3. File-system level encryption.")
print("4. Secure communication protocols (TLS/SSL) for data in transit.")
print("5. Hashing of sensitive data where re-identification is not needed (e.g., passwords).")

"""**Step 7: Basic Reporting & Visualization (Compliance Dashboard Idea)**
Consent Rate Visualization:
"""

import matplotlib.pyplot as plt
import seaborn as sns

consent_research_counts = df['ConsentForResearchSharing'].value_counts(normalize=True) * 100
print("\n--- Consent Rate for Research Sharing ---")
print(consent_research_counts)

plt.figure(figsize=(7, 5))
sns.barplot(x=consent_research_counts.index, y=consent_research_counts.values, palette='viridis')
plt.title('Percentage of Patients Consenting to Research Data Sharing')
plt.xlabel('Consent Given')
plt.ylabel('Percentage (%)')
plt.xticks(ticks=[0, 1], labels=['No', 'Yes'])
plt.ylim(0, 100)
plt.show()

consent_marketing_counts = df['ConsentForMarketing'].value_counts(normalize=True) * 100
print("\n--- Consent Rate for Marketing ---")
print(consent_marketing_counts)

plt.figure(figsize=(7, 5))
sns.barplot(x=consent_marketing_counts.index, y=consent_marketing_counts.values, palette='plasma')
plt.title('Percentage of Patients Consenting to Marketing Communications')
plt.xlabel('Consent Given')
plt.ylabel('Percentage (%)')
plt.xticks(ticks=[0, 1], labels=['No', 'Yes'])
plt.ylim(0, 100)
plt.show()

"""Audit Log Activity (Simple Plot):"""

if not audit_df_hipaa.empty:
    action_status_counts = audit_df_hipaa.groupby(['Action', 'Status']).size().unstack(fill_value=0)
    print("\n--- Audit Log Action & Status Counts ---")
    print(action_status_counts)

    action_status_counts.plot(kind='bar', figsize=(10, 6), colormap='RdYlGn')
    plt.title('Distribution of Actions and Their Status in Audit Log')
    plt.xlabel('Action')
    plt.ylabel('Count')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()
else:
    print("\nNo audit log data to visualize.")



### Project Discussion, Limitations & HIPAA Compliance Considerations

# This project is a simplified demonstration of HIPAA concepts

# Key Takeaways and HIPAA Specifics:

# 1.  **PHI De-identification (Safe Harbor):** We demonstrated the removal of common HIPAA identifiers. In reality, strict adherence to the Safe Harbor method, or the more complex "Expert Determination" method, is required. Even de-identified data can sometimes be re-identified with enough external information, which is a continuous concern.
# 2.  **Minimum Necessary Rule:** We conceptually touched upon this in access control. Any access, use, or disclosure of PHI must be limited to the minimum amount of information necessary to accomplish the intended purpose.
# 3.  **Consent vs. Authorization:** HIPAA distinguishes between consent (general agreement for TPO) and authorization (specific, written permission for uses like marketing or certain research). Our "consent" flags serve as a simplified proxy for these.
# 4.  **Audit Controls:** Our audit log captures basic access. A real system requires detailed logs of all ePHI access, modifications, and deletions, with robust mechanisms for review and anomaly detection.
# 5.  **Access Control:** Role-Based Access Control (RBAC) is essential. Systems must ensure only authorized personnel can access ePHI relevant to their job function.
# 6.  **Encryption:** HIPAA mandates encryption for ePHI at rest and in transit. This means databases, backup files, and data moving over networks must be encrypted using strong, industry-standard algorithms. Key management is paramount.
# 7.  **Physical Safeguards:** Not demonstrated in code, but crucial. This includes controlling access to physical locations where ePHI is stored (e.g., data centers, servers).
# 8.  **Administrative Safeguards:** Again, not directly coded, but critical. These include:
    #  **Risk Analysis & Management:** Regularly assessing and mitigating risks to ePHI.
    # **Sanction Policy:** Disciplinary actions for workforce members who violate HIPAA policies.
    # **Workforce Training:** Regular training on HIPAA policies and procedures.
    # **Business Associate Agreements (BAAs):** Legal contracts ensuring BAs also comply with HIPAA.
# 9.  **Breach Notification Rule:** Having a detailed plan for what to do in case of a data breach, including notifying affected individuals, the HHS Office for Civil Rights (OCR), and potentially the media within specific timeframes.
# 10. **Data Integrity:** Ensuring ePHI is not improperly altered or destroyed. This involves data validation, checksums, and secure backup strategies.

# **Next Steps for a Real-World, HIPAA-Compliant Application:**

# **Secure Database:** Implement a robust, encrypted database solution (e.g., AWS RDS with encryption, Azure SQL Database, Google Cloud SQL) specifically designed for healthcare data, or a self-managed database with TDE.
# **Robust Authentication & Authorization System:** Integrate with enterprise-grade identity providers (e.g., Okta, Azure AD) and implement multi-factor authentication (MFA).
# **Secure API Design:** Build APIs that enforce authorization, encrypt data in transit (TLS 1.2+), and validate all inputs to prevent injection attacks.
# **Comprehensive Logging & Monitoring:** Utilize cloud logging services (e.g., Cloud Logging, CloudWatch Logs) and security information and event management (SIEM) systems for real-time monitoring and alerting.
# **Regular Security Audits & Penetration Testing:** Engage third-party experts to regularly test the system for vulnerabilities.
# **Incident Response Plan:** Develop, test, and refine a detailed plan for responding to security incidents and data breaches.
# **Legal Counsel:** Crucially, consult with legal professionals specializing in HIPAA to ensure all aspects of the system and its operations comply with the law.
# **Cloud Compliance Features:** If using cloud providers (AWS, Azure, GCP), leverage their built-in compliance features and services designed for HIPAA-eligible workloads.